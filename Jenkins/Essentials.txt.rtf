{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red252\green9\blue7;\red252\green41\blue19;}
{\*\expandedcolortbl;;\cssrgb\c100000\c15764\c0;\cssrgb\c100000\c25745\c7993;}
\paperw11900\paperh16840\margl1440\margr1440\vieww15080\viewh10440\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
#1.this is the standard method to create a Declarative pipeline inside Jenkins\
\
pipeline\{\
    agent any;\
     \
     stages\{\
         stage("code")\{\
             steps\{\
                 echo"this is a code step"\
             \}\
         \}\
         stage("build")\{\
             steps\{\
                 echo"this is build step"\
             \}\
         \}\
         stage("test")\{\
             steps\{\
                 echo"this is a test step"\
             \}\
         \}\
         stage("deploy")\{\
             steps\{\
                 echo"this is deploy step"\
             \}\
         \}\
         \
     \}\
\}\
\
\
#2. now the more complex complete one\
\
pipeline\{\
    agent any;\
    environment \{\
        PATH = "/usr/local/bin:/usr/bin:/bin:$\{env.PATH\}"\
    \}\
     \
     stages\{\
         stage("Code Clone")\{\
             steps\{\
                 echo"this is code clonning step"\
                 git url : "https://github.com/Rahul462000/two-tier-flask-app.git" , branch:"master"\
             \}\
         \}\
         stage("build")\{\
             steps\{\
                 echo"this is build step by using docker build"\
                 sh "docker build -t two-tier-flask-app ."\
             \}\
         \}\
         stage("test")\{\
             steps\{\
                 echo"this is a test step"\
             \}\
         \}\
         stage("Push to dockerhub")\{\
             steps\{\
                 withCredentials([usernamePassword(\
                     credentialsId: "DockerHubID",\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl288\slmult1\pardirnatural\partightenfactor0
\cf0                      passwordVariable: "dockerHubPass",     
\f1\b \cf2 \ul \ulc2 \'97\'97\'97\'97> this is a userdefined variable you can make with any name 
\f0\b0 \cf0 \ulnone \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0                      usernameVariable: "dockerHubUser\'94       \cf3 \'97\'97\'97\'97> this is a userdefined variable you can make with any name \cf0 \
                     )])\{\
                 sh "docker login -u $\{env.dockerhubUser\} -p $\{env.dockerHubPass\}\'94     \'97\'97\'97\'97> use the variabel to call the value from credentials store in manage jenkins credentials (dockerhub username and PAT)\
                 sh "docker image tag two-tier-flask-app:latest $\{env.dockerhubUser\}/two-tier-flask-app "\
                 sh "docker push $\{env.dockerhubUser\}/two-tier-flask-app:latest"\
             \
                 \}         \
              \}\
         \}\
         \
         stage("deploy")\{\
             steps\{\
                 echo"this is deploy step using docker compose"\
                 sh "docker compose up -d"\
             \}\
         \}\
         \
     \}\
\}}